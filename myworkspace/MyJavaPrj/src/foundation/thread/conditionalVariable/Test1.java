package foundation.thread.conditionalVariable;

import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

/**
* Java线程：条件变量
*
* @author leizhimin 2009-11-5 10:57:29
*/

//下面以一个银行存取款的模拟程序为例来揭盖Java多线程条件变量的神秘面纱：
//有一个账户，多个用户（线程）在同时操作这个账户，有的存款有的取款，存款随便存，取款有限制，不能透支，
//任何试图透支的操作都将等待里面有足够存款才执行操作。

public class Test1 {
        public static void main(String[] args) {
                //创建并发访问的账户
                MyCount1 myCount = new MyCount1("95599200901215522", 10000);
                //创建一个线程池
                ExecutorService pool = Executors.newFixedThreadPool(2);
                Thread t1 = new SaveThread1("张三", myCount, 2000);
                Thread t2 = new SaveThread1("李四", myCount, 3600);
                Thread t3 = new SaveThread1("王五", myCount, 2700);
                Thread t4 = new SaveThread1("老张", myCount, 600);
                Thread t5 = new SaveThread1("老牛", myCount, 1300);
                Thread t6 = new SaveThread1("胖子", myCount, 800);
                //执行各个线程
                pool.execute(t1);
                pool.execute(t2);
                pool.execute(t3);
                pool.execute(t4);
                pool.execute(t5);
                pool.execute(t6);
                //关闭线程池
                pool.shutdown();
        }
}

/**
* 存款线程类
*/
class SaveThread1 extends Thread {
        private String name;                //操作人
        private MyCount1 myCount;        //账户
        private int x;                            //存款金额

        SaveThread1(String name, MyCount1 myCount, int x) {
                this.name = name;
                this.myCount = myCount;
                this.x = x;
        }

        public void run() {
                myCount.saving(x, name);
        }
}

/**
* 取款线程类
*/
class DrawThread1 extends Thread {
        private String name;                //操作人
        private MyCount1 myCount;        //账户
        private int x;                            //存款金额

        DrawThread1(String name, MyCount1 myCount, int x) {
                this.name = name;
                this.myCount = myCount;
                this.x = x;
        }

        public void run() {
                myCount.drawing(x, name);
        }
}


/**
* 普通银行账户，不可透支
*/
class MyCount1 {
        private String oid;                         //账号
        private int cash;                             //账户余额
        private Lock lock = new ReentrantLock();                //账户锁
        private Condition _save = lock.newCondition();    //存款条件
        private Condition _draw = lock.newCondition();    //取款条件

        MyCount1(String oid, int cash) {
                this.oid = oid;
                this.cash = cash;
        }

        /**
         * 存款
         *
         * @param x        操作金额
         * @param name 操作人
         */
        public void saving(int x, String name) {
                lock.lock();                        //获取锁
                if (x > 0) {
                        cash += x;                    //存款
                        System.out.println(name + "存款" + x + "，当前余额为" + cash);
                }
                _draw.signalAll();            //唤醒所有等待线程。
                lock.unlock();                    //释放锁
        }

        /**
         * 取款
         *
         * @param x        操作金额
         * @param name 操作人
         */
        public void drawing(int x, String name) {
                lock.lock();                                 //获取锁
                try {
                        if (cash - x < 0) {
                                _draw.await();             //阻塞取款操作
                        } else {
                                cash -= x;                     //取款
                                System.out.println(name + "取款" + x + "，当前余额为" + cash);
                        }
                        _save.signalAll();             //唤醒所有存款操作
                } catch (InterruptedException e) {
                        e.printStackTrace();
                } finally {
                        lock.unlock();                     //释放锁
                }
        }
}
